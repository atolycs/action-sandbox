name: Check with ReviewDog

on:
    workflow_dispatch:
    pull_request:
            branches:
                - to_merge

jobs:
    reviewdog:
        name: Setup ReviewDog
        runs-on: ubuntu-latest
        if: github.event.pull_request.merged == false
        steps:
         - name: Checkout Repository
           uses: actions/checkout@v4

         - name: Setup ReviewDog
           uses: reviewdog/action-setup@v1
           with:
                reviewdog_version: latest
         - name: Setup node
           uses: actions/setup-node@v4
        
         - name: cache activate
           uses: actions/cache@v4
           id: node_modules_cache_id
           env:
            cache-name: 'node_modules'
           with:
            path: '**/node_modules'
            key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
                ${{ runner.os }}-lint
        
         - name: Checking node_modules cache
           run: echo '${{ toJSON(steps.node_modules_cache_id.outputs) }}'
        
         - if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
           name: Install eslint and dependencies
           run: |
              npm ci
        
         - name: Installed eslint check
           run: npm ls --depth=1

    linterhtml:
          name: HTML Linter
          runs-on: ubuntu-latest
          needs: [ reviewdog ]
          if: github.event.pull_request.merged == false
          steps:
            - name: Generate Token
              id: create_token
              uses: actions/create-github-app-token@v1
              with:
                app-id: ${{ secrets.APP_ID }}
                private-key: ${{ secrets.APP_PEM }}
 
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: cache restore
              uses: actions/cache@v4
              with:
                path: '**/node_modules'
                key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                    ${{ runner.os }}-lint

            - name: Run html eslint with reviewdog
              uses: reviewdog/action-eslint@v1
              with:
                github_token: ${{ steps.create_token.outputs.token }}
                reporter: github-pr-review
                fail_on_error: true
                eslint_flags: "./src/**/*.html"

    lintercss:
        name: CSS Linter
        runs-on: ubuntu-latest
        needs: [ reviewdog ]
        if: github.event.pull_request.merged == false
        steps:
          - name: Generate Token
            id: create_token
            uses: actions/create-github-app-token@v1
            with:
              app-id: ${{ secrets.APP_ID }}
              private-key: ${{ secrets.APP_PEM }}

          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: cache restore
            uses: actions/cache@v4
            with:
                path: '**/node_modules'
                key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                    ${{ runner.os }}-lint

          - name: Run stylelint with reviewdog
            uses: reviewdog/action-stylelint@v1
            with:
              github_token: ${{ steps.create_token.outputs.token }}
              reporter: github-pr-review
              fail_on_error: true
              stylelint_input: "./src/**/*.css"
    
    review_result:
      name: Review Result
      runs-on: ubuntu-latest
      needs: [linterhtml, lintercss]
      if: github.event.pull_request.merged == false
      steps:
        - name: Generate Token
          id: create_token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ secrets.APP_ID }}
            private-key: ${{ secrets.APP_PEM }}

        - name: Completed Message
          env:
            GH_TOKEN: ${{ steps.create_token.outputs.token }}
            PR_NUMBER: ${{ github.event.number }}
            WEBHOOK_URL: ${{ secrets.DISCORD_GITHUB_GIRLS }}
          run: | 
           if [[ ! -z "${PR_NUMBER}" ]];then
            gh pr review --repo ${GITHUB_REPOSITORY} $PR_NUMBER --approve 
            gh pr review --repo ${GITHUB_REPOSITORY} $PR_NUMBER --comment --body 'Approved! meow'
           fi
           curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "content": "マージリクエスト承認!\n ${{ github.event.pull_request.html_url }}"
            }' "${WEBHOOK_URL}"


    deploy-production:
      name: Deploying Githu Pages
      runs-on: ubuntu-latest
      if: github.event.pull_request.merged == true
      environment:
          name: github-pages
          url: ${{ steps.deployment.outputs.page_url }}
      steps:
        - name: Discord Bot Webhook
          env:
            WEBHOOK_URL: ${{ secrets.DISCORD_KOMANIYA_URL }}
          run: |
            curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "content": "狛荷屋をお選びいただき、ありがとうございます!\n発送したので、少し待っててね!"
            }' "${WEBHOOK_URL}"

        - name: Generate Token
          id: create-token
          uses: actions/create-github-app-token@v1
          with:
            app-id: ${{ secrets.APP_ID }}
            private-key: ${{ secrets.APP_PEM }}

        - name: checkout
          uses: actions/checkout@v3

        - name: Setup Pages
          uses: actions/configure-pages@v4
          with:
              token: ${{ steps.create-token.outputs.token }}

        - name: Upload Artifacts
          uses: actions/upload-pages-artifact@v3
          with:
            path: './src'
        
        - name: Deploy Github Pages
          uses: actions/deploy-pages@v4
          id: deployment
          with:
            token: ${{ steps.create-token.outputs.token }}

        - name: Discord Bot Webhook
          env:
            WEBHOOK_URL: ${{ secrets.DISCORD_KOMANIYA_URL }}
          run: |
            curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "content": "狛荷屋をお選びいただき、ありがとうございます!\n発送が終わったよ!!\nURLはここ!=> ${page_url}"
            }' "${WEBHOOK_URL}"

    
